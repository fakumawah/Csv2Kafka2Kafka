plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.micronaut.application") version "3.4.1"
}

//allprojects {
//    version = "0.1"
//    group = "de.ri.core"
//}

subprojects { subproject ->
    apply plugin: "java"
    apply plugin: "groovy"
    apply plugin: "project-report"
    apply plugin: "jacoco"

    ext.artifactid = "${rootProject.name}-${project.name}"
//    ext.artifactid = "${project.name}"

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        withSourcesJar()
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.compilerArgs.addAll([
                '-parameters',
                '-Amicronaut.processing.incremental=true',
                '-Amicronaut.processing.annotations=de.db.ri.as.halttafel.*',
                "-Amicronaut.processing.group=$project.group",
                "-Amicronaut.processing.module=$project.name",
        ])
    }

    tasks.withType(GroovyCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Test) {
        maxParallelForks = Runtime.runtime.availableProcessors()
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        annotationProcessor("org.projectlombok:lombok")
        annotationProcessor("io.micronaut:micronaut-http-validation")
        implementation("io.micronaut:micronaut-http-client")
        implementation("io.micronaut:micronaut-jackson-databind")
        implementation("io.micronaut.kafka:micronaut-kafka")
        implementation("io.micronaut.test:micronaut-test-junit5")
        implementation("jakarta.annotation:jakarta.annotation-api")
        compileOnly("org.projectlombok:lombok")
        runtimeOnly("ch.qos.logback:logback-classic")
        implementation("io.micronaut:micronaut-validation")

    }

    application {
        mainClass.set("de.ri.core.Application")
    }

    shadowJar {
        mergeServiceFiles()
        archiveClassifier = ""
        archiveBaseName = "${artifactid}-all"
    }

}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("de.ri.core.*")
    }
}



